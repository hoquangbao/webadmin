[{"/Users/mac/antd-admin/src/index.js":"1","/Users/mac/antd-admin/src/App.js":"2","/Users/mac/antd-admin/src/redux/store.js":"3","/Users/mac/antd-admin/src/redux/root-reducer.js":"4","/Users/mac/antd-admin/src/components/error-boundary/error-boundary.js":"5","/Users/mac/antd-admin/src/components/scroll-to-top/scroll-to-top.component.jsx":"6","/Users/mac/antd-admin/src/redux/user/index.js":"7","/Users/mac/antd-admin/src/layouts/auth-layout/index.js":"8","/Users/mac/antd-admin/src/views/page404/index.js":"9","/Users/mac/antd-admin/src/layouts/dashboard-layout/index.js":"10","/Users/mac/antd-admin/src/components/error-boundary/error-boundary.styles.jsx":"11","/Users/mac/antd-admin/src/redux/user/user.js":"12","/Users/mac/antd-admin/src/views/page404/Page404.js":"13","/Users/mac/antd-admin/src/layouts/auth-layout/auth-layout.js":"14","/Users/mac/antd-admin/src/layouts/dashboard-layout/dashboard-layout.js":"15","/Users/mac/antd-admin/src/_routes.js":"16","/Users/mac/antd-admin/src/privateRoute.js":"17","/Users/mac/antd-admin/src/components/page-header/index.js":"18","/Users/mac/antd-admin/src/views/lessons-view/index.js":"19","/Users/mac/antd-admin/src/views/login-view/index.js":"20","/Users/mac/antd-admin/src/views/posts-view/index.js":"21","/Users/mac/antd-admin/src/components/page-header/page-header.js":"22","/Users/mac/antd-admin/src/views/login-view/loginview.js":"23","/Users/mac/antd-admin/src/views/posts-view/posts-view.js":"24","/Users/mac/antd-admin/src/views/lessons-view/lessons-view.js":"25","/Users/mac/antd-admin/src/config/axios.js":"26","/Users/mac/antd-admin/src/firebase/firebase.utils.js":"27","/Users/mac/antd-admin/src/components/sign-in/index.js":"28","/Users/mac/antd-admin/src/components/sign-in/sign-in.js":"29"},{"size":529,"mtime":1608373921233,"results":"30","hashOfConfig":"31"},{"size":1745,"mtime":1608373921231,"results":"32","hashOfConfig":"31"},{"size":683,"mtime":1608373921235,"results":"33","hashOfConfig":"31"},{"size":389,"mtime":1608373921235,"results":"34","hashOfConfig":"31"},{"size":1459,"mtime":1608373921232,"results":"35","hashOfConfig":"31"},{"size":339,"mtime":1608373921232,"results":"36","hashOfConfig":"31"},{"size":88,"mtime":1608373921235,"results":"37","hashOfConfig":"31"},{"size":66,"mtime":1608373921234,"results":"38","hashOfConfig":"31"},{"size":56,"mtime":1608373921237,"results":"39","hashOfConfig":"31"},{"size":81,"mtime":1608373921234,"results":"40","hashOfConfig":"31"},{"size":618,"mtime":1608373921232,"results":"41","hashOfConfig":"31"},{"size":1671,"mtime":1608373921235,"results":"42","hashOfConfig":"31"},{"size":313,"mtime":1608373921237,"results":"43","hashOfConfig":"31"},{"size":1227,"mtime":1608373921234,"results":"44","hashOfConfig":"31"},{"size":2357,"mtime":1608373921234,"results":"45","hashOfConfig":"31"},{"size":807,"mtime":1608373921231,"results":"46","hashOfConfig":"31"},{"size":579,"mtime":1608373921234,"results":"47","hashOfConfig":"31"},{"size":65,"mtime":1608373921232,"results":"48","hashOfConfig":"31"},{"size":69,"mtime":1608373921236,"results":"49","hashOfConfig":"31"},{"size":62,"mtime":1608373921236,"results":"50","hashOfConfig":"31"},{"size":63,"mtime":1608373921237,"results":"51","hashOfConfig":"31"},{"size":972,"mtime":1608373921232,"results":"52","hashOfConfig":"31"},{"size":442,"mtime":1608373921236,"results":"53","hashOfConfig":"31"},{"size":8740,"mtime":1608697160927,"results":"54","hashOfConfig":"31"},{"size":54446,"mtime":1608610829402,"results":"55","hashOfConfig":"31"},{"size":2230,"mtime":1608696891597,"results":"56","hashOfConfig":"31"},{"size":660,"mtime":1608463459236,"results":"57","hashOfConfig":"31"},{"size":54,"mtime":1608373921233,"results":"58","hashOfConfig":"31"},{"size":2674,"mtime":1608373921233,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"yuuqgt",{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"62"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"62"},"/Users/mac/antd-admin/src/index.js",[],["127","128"],"/Users/mac/antd-admin/src/App.js",["129","130","131","132"],"import React, { lazy, Suspense } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport 'antd/dist/antd.css';\n\nimport ErrorBoundary from './components/error-boundary/error-boundary';\nimport ScrollToTop from './components/scroll-to-top/scroll-to-top.component';\n\nimport Creators from './redux/user'\n\n// load lazy\nconst Page404 = React.lazy(() => import('./views/page404'))\nconst AuthLayout = React.lazy(() => import('./layouts/auth-layout'))\nconst DashboardLayout = React.lazy(() => import('./layouts/dashboard-layout'))\n// end lazy\n\nclass App extends React.Component {\n  unsubscribeFromAuth = null;\n\n  componentDidMount() {\n    // const { checkUserSession } = this.props;\n    // checkUserSession();\n  }\n\n  componentWillUnmount() {\n    // this.unsubscribeFromAuth();\n  }\n\n  render() {\n    return (\n      <div>\n        <Switch>\n          <ErrorBoundary>\n            <ScrollToTop>\n              <Suspense fallback={<></>}>\n                <Switch>\n                  <Route exact path=\"/404\" name=\"Page 404\" render={(props) => <Page404 {...props} />} />\n                  <Route path=\"/app\" name=\"Default\" render={(props) => <DashboardLayout {...props} />} />\n                  <Route path=\"/\" name=\"Auth\" render={(props) => <AuthLayout {...props} />} />\n                </Switch>\n              </Suspense>\n            </ScrollToTop>\n          </ErrorBoundary>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  // checkUserSession: () => dispatch(Creators.checkUserSession()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/Users/mac/antd-admin/src/redux/store.js",["133"],"import { createStore, applyMiddleware, compose } from 'redux';\nimport { persistStore } from 'redux-persist';\n\nimport rootReducer from './root-reducer';\n\n\nconst middlewares = [];\nconst enhancers = [applyMiddleware(...middlewares)]\n\nconst composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ // eslint-disable-line no-undef\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) // eslint-disable-line no-undef\n      : compose\nexport const store = createStore(rootReducer, composeEnhancers(...enhancers));\n\nexport const persistor = persistStore(store);\n\nexport default { store, persistor };\n","/Users/mac/antd-admin/src/redux/root-reducer.js",[],"/Users/mac/antd-admin/src/components/error-boundary/error-boundary.js",[],"/Users/mac/antd-admin/src/components/scroll-to-top/scroll-to-top.component.jsx",[],"/Users/mac/antd-admin/src/redux/user/index.js",[],"/Users/mac/antd-admin/src/layouts/auth-layout/index.js",[],"/Users/mac/antd-admin/src/views/page404/index.js",[],"/Users/mac/antd-admin/src/layouts/dashboard-layout/index.js",[],"/Users/mac/antd-admin/src/components/error-boundary/error-boundary.styles.jsx",[],"/Users/mac/antd-admin/src/redux/user/user.js",[],"/Users/mac/antd-admin/src/views/page404/Page404.js",["134"],"import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nconst Page404 = () => {\n    return <>404 Page</>\n}\n\nPage404.propTypes = {}\n\nconst mapStateToProps = (state) => ({})\n\nconst mapDispatchToProps = (dispatch) => ({})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Page404)\n","/Users/mac/antd-admin/src/layouts/auth-layout/auth-layout.js",[],"/Users/mac/antd-admin/src/layouts/dashboard-layout/dashboard-layout.js",["135","136"],"import React, { Component, Suspense, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { Switch, Redirect, Link } from 'react-router-dom'\n//routes\nimport { routes } from '../../_routes'\n\n//antd components\nimport { Layout, Menu } from 'antd';\nimport {\n  UserOutlined,\n  UploadOutlined,\n  VideoCameraOutlined,\n} from '@ant-design/icons';\n//\n\n//app components\nimport PrivateRoute from '../../privateRoute'\nimport PageHeader from '../../components/page-header'\nimport './dashboard-layout.scss'\n\nconst { Content, Sider } = Layout;\nconst { SubMenu } = Menu;\n\nconst DashboardLayout = (props) => {\n  const renderRoutes = (routes = {}, userRole = '') =>\n    routes.map((route) =>\n      Component && route.rolesAccess.includes(userRole) ? (\n        <PrivateRoute key={window.location.pathname} {...route} />\n      ) : null,\n    )\n\n\n  return (\n    <Layout>\n      <Sider\n        style={{\n          overflow: 'auto',\n          height: '100vh',\n          position: 'fixed',\n          left: 0,\n        }}\n      >\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n          <SubMenu key=\"Level\" icon={<UserOutlined />} title=\"Lessons\">\n            <Menu.Item key=\"1\"><Link to=\"/app/lessons/1\">Beginer</Link></Menu.Item>\n            <Menu.Item key=\"2\"><Link to=\"/app/lessons/2\">Intermediate</Link></Menu.Item>\n            <Menu.Item key=\"3\"><Link to=\"/app/lessons/3\">Advance</Link></Menu.Item>\n          </SubMenu>\n          <Menu.Item key=\"4\" icon={<VideoCameraOutlined />}>\n            <Link to=\"/app/posts\">Posts</Link>\n          </Menu.Item>\n        </Menu>\n      </Sider>\n      <Layout className=\"site-layout\" style={{ marginLeft: 200, height: '100vh' }}>\n        <PageHeader />\n        <Content style={{ margin: '24px 16px 0', overflow: 'initial' }}>\n          <div className=\"site-layout-background\" style={{ padding: 24, textAlign: 'center', minHeight: '80vh' }}>\n            <Suspense fallback={<></>}>\n              <Switch>\n                {renderRoutes(routes)}\n                <Redirect to=\"/404\" />\n              </Switch>\n            </Suspense>\n          </div>\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n\nconst mapStateToProps = (state) => ({\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardLayout)\n","/Users/mac/antd-admin/src/_routes.js",[],"/Users/mac/antd-admin/src/privateRoute.js",["137","138","139","140","141"],"import React, { Component, useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Route, Redirect } from 'react-router-dom'\n\nfunction PrivateRoute({ component: Component, isLogin, ...rest }) {\n  const [open, setOpen] = React.useState(false);\n\n  return <>\n    <Route\n      {...rest}\n      render={(props) =>\n        isLogin ? (\n          <Component {...props} />\n        ) : (\n            <Redirect to=\"/login\" />\n          )\n      }\n    />\n  </>\n\n}\n\nexport default connect(state => ({\n  isLogin: state.user.isLogin\n}), dispatch => ({\n}))(PrivateRoute)\n","/Users/mac/antd-admin/src/components/page-header/index.js",[],"/Users/mac/antd-admin/src/views/lessons-view/index.js",[],"/Users/mac/antd-admin/src/views/login-view/index.js",[],"/Users/mac/antd-admin/src/views/posts-view/index.js",[],"/Users/mac/antd-admin/src/components/page-header/page-header.js",["142"],"import React from 'react'\nimport { connect } from 'react-redux'\nimport Creators from '../../redux/user'\nimport { PageHeader, Button, Dropdown, Menu, message } from 'antd';\n\nimport {\n  UserOutlined,\n  LogoutOutlined,\n  SettingOutlined,\n} from '@ant-design/icons';\n\nimport './page-header.scss'\n\nconst CustomPageHeader = (props) => {\n  const userMenu = (\n    <Menu>\n      <Menu.Item key=\"1\" icon={<LogoutOutlined />} onClick={() => props.signOut()}>\n        Sign out\n      </Menu.Item>\n    </Menu>\n  );\n\n\n  return (\n    <div className=\"site-page-header\">\n      <PageHeader\n        extra={[\n          <Button key=\"2\"><SettingOutlined /></Button>,\n          <Dropdown key=\"1\" overlay={userMenu}>\n            <Button type=\"primary\">\n              Username <UserOutlined />\n            </Button>\n          </Dropdown>\n        ]}\n      />\n    </div>\n  )\n}\n\nexport default connect(state => ({\n\n}), dispatch => ({\n  signOut: () => dispatch(Creators.signOut())\n}))(CustomPageHeader)\n","/Users/mac/antd-admin/src/views/login-view/loginview.js",[],"/Users/mac/antd-admin/src/views/posts-view/posts-view.js",["143"],"/Users/mac/antd-admin/src/views/lessons-view/lessons-view.js",["144","145","146","147","148","149","150","151"],"import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { request } from '../../config/axios'\nimport { storage } from '../../firebase/firebase.utils'\n\nimport { Spin, Space, Row, Table, message, Image, Modal, Tabs, Input, Button, Form, Typography, Upload, Dropdown, Menu } from 'antd';\nimport { LoadingOutlined, PlusOutlined, DownOutlined, UserOutlined } from '@ant-design/icons'\nconst { TabPane } = Tabs;\nconst { Text } = Typography\n\n\n// import { getCurrentUser } from '../../utils/firebase'\n\nconst LessonsView = (props) => {\n  const [loading, setLoading] = React.useState(true)\n  const [dataSource, setDataSource] = React.useState([])\n  const [vocabularyDataSource, setVocabularyDataSource] = React.useState([])\n  const [conversationDataSource, setConverastionDataSource] = React.useState([])\n  const [quizDataSource, setQuizDataSource] = React.useState([])\n  const [isModalVisible, setModalVisible] = React.useState(false)\n  const [isVocabularyUpdateModalVisible, setVocabularyUpdateModalVisible] = React.useState(false)\n  const [isVocabularyCreateModalVisible, setVocabularyCreateModalVisible] = React.useState(false)\n  const [isLessonCreateModalVisible, setLessonCreateModalVisible] = React.useState(false)\n  const [isQuizCreateModalVisible, setQuizCreateModalVisible] = React.useState(false)\n  const [isDropDownCreateModalVisible, setDropDownCreateModalVisible] = React.useState(false)\n  const [isConversationCreateModalVisible, setConversationCreateModalVisible] = React.useState(false)\n  const [isConversationUpdateModalVisible, setConversationUpdateModalVisible] = React.useState(false)\n  const [isQuizUpdateModalVisible, setQuizUpdateModalVisible] = React.useState(false)\n  const [isDropDown, setDropDown] = React.useState(true)\n  const [vocabularyModalContent, setVocabularyModalContent] = React.useState({})\n  const [vocabularyCreateModalContent, setVocabularyCreateModalContent] = React.useState({})\n  const [conversationCreateModalContent, setConversationCreateModalContent] = React.useState({})\n  const [lessonCreateModalContent, setLessonCreateModalContent] = React.useState({})\n  const [quizCreateModalContent, setQuizCreateModalContent] = React.useState({})\n  const [conversationModalContent, setConversationModalContent] = React.useState({})\n  const [quizModalContent, setQuizModalContent] = React.useState({})\n  const [isSomethingLoading, setSomethingLoading] = React.useState(false)\n  const [quizType, setQuizType] = React.useState(false)\n  const [vocaForm] = Form.useForm()\n  const [conversationForm] = Form.useForm()\n  const [quizForm] = Form.useForm()\n  const [currentLesson, setCurrentLesson] = React.useState(-1)\n  const [currentLevel, setCurrentLevel] = React.useState(0)\n  const columns = [\n    {\n      title: 'Lesson ID',\n      dataIndex: 'lessonID',\n      key: 'lessonID',\n      width: 150\n    },\n    {\n      title: 'Name',\n      dataIndex: 'lessonName',\n      key: 'lessonName',\n      width: 150\n    },\n    {\n      title: 'Image',\n      dataIndex: 'lessonImage',\n      key: 'lessonImage',\n      width: 150,\n      render: text => <Image src={text} width={100} />\n    },\n    {\n      title: 'Action',\n      dataIndex: 'status',\n      key: 'status',\n      width: 150,\n      render: (text, record) => {\n        return (\n          <Space size=\"middle\">\n            <button type=\"primary\" onClick={() => showModal(record)}>Edit</button>\n          </Space>\n        )\n      }\n    },\n  ]\n  const vocabularyColumn = [\n    {\n      title: 'Vocabulary ID',\n      dataIndex: 'id',\n      key: 'vocabularyID',\n      width: 150\n    },\n    {\n      title: 'Vocabulary',\n      dataIndex: 'vocabulary',\n      key: 'vocabulary',\n      width: 300\n    },\n    {\n      title: 'Description',\n      dataIndex: 'description',\n      key: 'description',\n      width: 300\n    },\n    {\n      title: 'Image',\n      dataIndex: 'image',\n      key: 'vocabularyImage',\n      width: 150,\n      render: text => <Image src={text} width={100} />\n    },\n    {\n      title: 'Action',\n      dataIndex: 'status',\n      key: 'status',\n      width: 150,\n      render: (text, record) => {\n        return (\n          <Space size=\"middle\">\n            <button type=\"primary\" onClick={() => showVocabularyUpdateModal(record)}>Update</button>\n          </Space>\n        )\n      }\n    },\n  ]\n  const conversationColumn = [\n    {\n      title: 'Conversation ID',\n      dataIndex: 'id',\n      key: 'conversationID',\n      width: 150\n    },\n    {\n      title: 'Conversation',\n      dataIndex: 'conversation',\n      key: 'conversation',\n      width: 300\n    },\n    {\n      title: 'Description',\n      dataIndex: 'description',\n      key: 'description',\n      width: 300\n    },\n    {\n      title: 'Action',\n      dataIndex: 'status',\n      key: 'status',\n      width: 150,\n      render: (text, record) => {\n        return (\n          <Space size=\"middle\">\n            <button type=\"primary\" onClick={() => showConversationUpdateModal(record)}>Update</button>\n          </Space>\n        )\n      }\n    },\n    // {\n    //   title: 'Image',\n    //   dataIndex: 'conversationImage',\n    //   key: 'conversationImage',\n    //   width: 150,\n    //   render: text => <Image src={text} width={100} />\n    // },\n  ]\n  const quizColumn = [\n    {\n      title: 'Question',\n      dataIndex: 'question',\n      key: 'question',\n      width: 150\n    },\n    {\n      title: 'Answer A',\n      dataIndex: 'answer_a',\n      key: 'answer_a',\n      width: 150,\n      render: record => <Text type={record.checkCorrect === true ? 'success' : 'danger'}>{record.optionName}</Text>\n    },\n    {\n      title: 'Answer B',\n      dataIndex: 'answer_b',\n      key: 'answer_b',\n      width: 150,\n      render: record => <Text type={record.checkCorrect === true ? 'success' : 'danger'}>{record.optionName}</Text>\n    },\n    {\n      title: 'Answer C',\n      dataIndex: 'answer_c',\n      key: 'answer_c',\n      width: 150,\n      render: record => <Text type={record.checkCorrect === true ? 'success' : 'danger'}>{record.optionName}</Text>\n    },\n    {\n      title: 'Answer D',\n      dataIndex: 'answer_d',\n      key: 'answer_d',\n      width: 150,\n      render: record => <Text type={record.checkCorrect === true ? 'success' : 'danger'}>{record.optionName}</Text>\n    },\n    {\n      title: 'Action',\n      dataIndex: 'edit',\n      key: 'edit',\n      width: 150,\n      render: (text, record) => {\n        return (\n          <Space size=\"middle\">\n            <button type=\"primary\" onClick={() => showQuizUpdateModal(record)}>Update</button>\n          </Space>\n        )\n      }\n    },\n    // {\n    //   title: 'Options',\n    //   dataIndex: 'options',\n    //   key: 'options',\n    //   width: 300\n    // },\n  ]\n\n  const menu = (\n    <Menu onClick={handleMenuClick}>\n      <Menu.Item key=\"1\" icon={<UserOutlined />}>\n        Multiple choice\n      </Menu.Item>\n      <Menu.Item key=\"2\" icon={<UserOutlined />} >\n        Audio\n      </Menu.Item>\n      <Menu.Item key=\"3\" icon={<UserOutlined />}>\n        Video\n      </Menu.Item>\n    </Menu>\n  );\n\n  function handleMenuClick(e) {\n    setQuizType(e.keyPath[0]);\n    setDropDown(false);\n  }\n\n  const showVocabularyUpdateModal = (record) => {\n    console.log(record)\n    vocaForm.setFieldsValue(record)\n    setVocabularyModalContent(record)\n    setVocabularyUpdateModalVisible(true)\n  }\n\n  const showConversationUpdateModal = (record) => {\n    console.log(record)\n    conversationForm.setFieldsValue(record)\n    setConversationModalContent(record)\n    setConversationUpdateModalVisible(true)\n  }\n\n  const showQuizUpdateModal = (record) => {\n    console.log(record)\n    quizForm.setFieldsValue(record)\n    setQuizModalContent(record)\n    setQuizUpdateModalVisible(true)\n  }\n\n  const showVocabularyCreateModal = () => {\n    setVocabularyCreateModalVisible(true)\n  }\n\n  const showConversationCreateModal = () => {\n    setConversationCreateModalVisible(true)\n  }\n\n  const showQuizCreateModal = () => {\n    setQuizCreateModalVisible(true)\n  }\n\n  const showQuizDropDownCreateModal = () => {\n    setDropDownCreateModalVisible(true)\n  }\n\n  const showLessonCreateModal = () => {\n    setLessonCreateModalVisible(true)\n  }\n\n  const showModal = (record) => {\n    console.log(\"voca content: \", vocabularyDataSource)\n    setCurrentLesson(record.lessonID)\n    async function fetchVocabulary() {\n      try {\n        const result = await request.get(`/api/admin/getVocabulary/${record.lessonID}`)\n        if (result.code === 200) {\n          const { data } = result\n          const tableData = data.map(vocabulary => ({\n            key: vocabulary.id,\n            ...vocabulary\n          }))\n          console.log(\"Set voca data source\")\n          setVocabularyDataSource(tableData)\n        } else {\n          message.error({\n            content: 'Something went wrong!',\n            style: {\n              position: 'fixed',\n              bottom: '10px',\n              left: '50%'\n            }\n          })\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    fetchVocabulary();\n    async function fetchConversation() {\n      try {\n        const result = await request.get(`/api/admin/getConversation/${record.lessonID}`)\n        if (result.code === 200) {\n          const { data } = result\n          const tableData = data.map(conversation => ({\n            key: conversation.id,\n            ...conversation\n          }))\n          setConverastionDataSource(tableData)\n          setLoading(false)\n        } else {\n          message.error({\n            content: 'Something went wrong!',\n            style: {\n              position: 'fixed',\n              bottom: '10px',\n              left: '50%'\n            }\n          })\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    fetchConversation();\n    async function fetchQuiz() {\n      try {\n        const result = await request.get(`/api/admin/getQuestion/${record.lessonID}`)\n        if (result.code === 200) {\n          const { data } = result\n          const tableData = data.map(quiz => {\n            quiz.key = quiz.questionID;\n            quiz.answer_a = quiz.options[0]\n            quiz.answer_b = quiz.options[1]\n            quiz.answer_c = quiz.options[2]\n            quiz.answer_d = quiz.options[3]\n            return quiz\n          })\n          console.log(tableData)\n          setQuizDataSource(tableData)\n          setLoading(false)\n        } else {\n          message.error({\n            content: 'Something went wrong!',\n            style: {\n              position: 'fixed',\n              bottom: '10px',\n              left: '50%'\n            }\n          })\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    fetchQuiz();\n    setModalVisible(true)\n  }\n\n  useEffect(() => {\n    async function fetchLessons() {\n      try {\n        const level = window.location.pathname.split('/').reverse()[0]\n        const result = await request.get(`/api/admin/getByLevel/${level}`)\n        setCurrentLevel(level)\n        if (result.code === 200) {\n          const { data } = result\n          const tableData = data.map(lesson => ({\n            key: lesson.lessonID,\n            ...lesson\n          }))\n          setDataSource(tableData)\n          setLoading(false)\n        } else {\n          message.error({\n            content: 'Something went wrong!',\n            style: {\n              position: 'fixed',\n              bottom: '10px',\n              left: '50%'\n            }\n          })\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n\n    fetchLessons();\n  }, [])\n\n  const onVocabularyFormFinish = values => {\n    const preparedData = {\n      ...values,\n      ...vocabularyCreateModalContent,\n      id: currentLesson\n    }\n    setSomethingLoading(true)\n    async function updateVocabulary() {\n      try {\n        const result = await request.put(`/api/admin/updateVocabulary`, {\n          \"description\": values.description,\n          \"id\": values.id,\n          \"image\": preparedData.image,\n          \"listVocabulary\": [\n            {\n              \"id\": vocabularyModalContent.listVocabulary[0].id,\n              \"lessonID\": vocabularyModalContent.listVocabulary[0].lessonID\n            }\n          ],\n          \"vocabulary\": values.vocabulary,\n          \"voice_link\": preparedData.voice_link,\n\n        })\n        if (result.code === 200) {\n          setVocabularyDataSource(() =>\n            vocabularyDataSource.map(row => {\n              if (row.id === vocabularyModalContent.id) {\n                return {\n                  ...row,\n                  ...values\n                }\n              }\n              return row\n            })\n          )\n          console.log(\"success\")\n          setSomethingLoading(false)\n          setVocabularyUpdateModalVisible(false)\n        } else {\n          message.error({\n            content: 'Something went wrong!',\n            style: {\n              position: 'fixed',\n              bottom: '10px',\n              left: '50%'\n            }\n          })\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    updateVocabulary();\n  }\n\n  const onVocabularyCreateFormFinish = async values => {\n    const preparedData = {\n      ...values,\n      ...vocabularyCreateModalContent,\n      id: currentLesson\n    }\n    async function createVocabulary() {\n      try {\n        const result = await request.post(`/api/admin/addVocab/${currentLesson}`, {\n          \"description\": values.description,\n          \"image\": preparedData.image,\n          \"listVocabulary\": [\n            {\n              \"lessonID\": currentLesson\n            }\n          ],\n          \"vocabulary\": values.vocabulary,\n          \"voice_link\": preparedData.voice_link\n        })\n        if (result.code === 200) {\n          setVocabularyDataSource(vocabularyDataSource.map(row => {\n            if (row.id === vocabularyModalContent.id) {\n              return {\n                ...row,\n                ...values\n              }\n            }\n            return row;\n          }))\n          console.log(\"success\")\n          setSomethingLoading(false)\n          setVocabularyCreateModalVisible(false)\n        } else {\n          message.error({\n            content: 'Something went wrong!',\n            style: {\n              position: 'fixed',\n              bottom: '10px',\n              left: '50%'\n            }\n          })\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    createVocabulary();\n  }\n\n  const onConversationCreateFormFinish = async values => {\n    const preparedData = {\n      ...values,\n      ...conversationCreateModalContent,\n      id: currentLesson\n    }\n    async function createConversation() {\n      try {\n        const result = await request.post(`/api/admin/addConversation`, {\n          \"conversation\": preparedData.conversation,\n          \"conversationImage\": preparedData.image,\n          \"description\": preparedData.description,\n          \"lessonID\": currentLesson,\n          \"voice_link\": preparedData.voice_link\n        })\n        if (result.code === 200) {\n          setConverastionDataSource(conversationDataSource.map(row => {\n            if (row.id === conversationModalContent.id) {\n              return {\n                ...row,\n                ...values\n              }\n            }\n            return row;\n          }))\n          console.log(\"success\")\n          setSomethingLoading(false)\n          setConversationCreateModalVisible(false)\n        } else {\n          message.error({\n            content: 'Something went wrong!',\n            style: {\n              position: 'fixed',\n              bottom: '10px',\n              left: '50%'\n            }\n          })\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    createConversation();\n  }\n\n  const onLessonCreateFormFinish = async values => {\n\n    const preparedData = {\n      ...values,\n      ...lessonCreateModalContent,\n    }\n    async function createLesson() {\n      try {\n        const result = await request.post(`/api/admin/createLesson`, {\n          \"lessonImage\": preparedData.image,\n          \"lessonName\": preparedData.lessonName,\n          \"levelID\": preparedData.levelID\n        })\n        if (result.code === 200) {\n          setDataSource(dataSource.map(row => {\n            if (row.id === dataSource.id) {\n              return {\n                ...row,\n                ...values\n              }\n            }\n            return row;\n          }))\n          console.log(\"success\")\n          setSomethingLoading(false)\n          setLessonCreateModalVisible(false)\n        } else {\n          message.error({\n            content: 'Something went wrong!',\n            style: {\n              position: 'fixed',\n              bottom: '10px',\n              left: '50%'\n            }\n          })\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    createLesson();\n  }\n\n  const onConverastionFormFinish = values => {\n    setSomethingLoading(true)\n    async function updateConversation() {\n      try {\n        const result = await request.put(`/api/admin/updateConversation`, {\n          \"conversation\": values.conversation,\n          \"conversationImage\": values.converastionImage,\n          \"description\": values.description,\n          \"id\": values.id,\n          \"lessonID\": conversationModalContent.lessonID,\n          \"voice_link\": values.voice_link\n        })\n        if (result.code === 200) {\n          setConverastionDataSource(conversationDataSource.map(row => {\n            if (row.id === conversationModalContent.id) {\n              return {\n                ...row,\n                ...values\n              }\n            }\n            return row;\n          }))\n          console.log(\"success\")\n          setSomethingLoading(false)\n          setConversationUpdateModalVisible(false)\n        } else {\n          message.error({\n            content: 'Something went wrong!',\n            style: {\n              position: 'fixed',\n              bottom: '10px',\n              left: '50%'\n            }\n          })\n        }\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    updateConversation();\n  }\n\n  const onQuizFormFinish = values => {\n    console.log(values)\n    // setSomethingLoading(true)\n    // async function updateQuiz() {\n    //   try {\n    //     const result = await request.put(`/api/admin/updateConversation`, {\n    //       \"conversation\": values.conversation,\n    //       \"conversationImage\": values.converastionImage,\n    //       \"description\": values.description,\n    //       \"id\": values.id,\n    //       \"lessonID\": conversationModalContent.lessonID,\n    //       \"voice_link\": values.voice_link\n    //     })\n    //     if (result.code === 200) {\n    //       setConverastionDataSource(conversationDataSource.map(row => {\n    //         if (row.id === conversationModalContent.id) {\n    //           return {\n    //             ...row,\n    //             ...values\n    //           }\n    //         }\n    //         return row;\n    //       }))\n    //       console.log(\"success\")\n    //       setSomethingLoading(false)\n    //       setConversationUpdateModalVisible(false)\n    //     } else {\n    //       message.error({\n    //         content: 'Something went wrong!',\n    //         style: {\n    //           position: 'fixed',\n    //           bottom: '10px',\n    //           left: '50%'\n    //         }\n    //       })\n    //     }\n    //   } catch (e) {\n    //     console.log(e)\n    //   }\n    // }\n    // updateQuiz();\n  }\n\n  const beforeUpload = (file) => {\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n\n    if (!isJpgOrPng) {\n      message.error('You can only upload JPG/PNG file!');\n    }\n    const isLt1M = file.size / 1024 / 1024 < 1;\n    if (!isLt1M) {\n      message.error('Image must smaller than 1MB!');\n    }\n    return isJpgOrPng && isLt1M;\n  }\n\n  const getBase64 = (img, callback) => {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => callback(reader.result));\n    reader.readAsDataURL(img);\n  }\n\n  const handleVocaImageChange = info => {\n    if (info.file.status === 'uploading') {\n      return;\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      getBase64(info.file.originFileObj, imageUrl => {\n        setVocabularyCreateModalContent({\n          ...vocabularyCreateModalContent,\n          image: imageUrl\n        })\n      }\n      );\n    }\n  }\n\n  const handleLessonImageChange = info => {\n    if (info.file.status === 'uploading') {\n      return;\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      getBase64(info.file.originFileObj, imageUrl => {\n        setLessonCreateModalContent({\n          ...lessonCreateModalContent,\n          image: imageUrl\n        })\n      }\n      );\n    }\n  }\n\n  const uploadImg = async (file) => {\n    let identify = file.name + '__' + Date.now();\n    let imgURL;\n    await storage.ref(`image/${currentLesson.trim()}/Vocabulary/${identify}`).put(file);\n    await storage.ref(`image/${currentLesson.trim()}/Vocabulary`).child(identify).getDownloadURL().then(url => {\n      imgURL = url;\n    })\n    setVocabularyCreateModalContent({\n      ...vocabularyCreateModalContent,\n      image: imgURL\n    })\n    return imgURL\n  }\n\n  const uploadConversationImg = async (file) => {\n    let identify = file.name + '__' + Date.now();\n    let imgURL;\n    await storage.ref(`image/${currentLesson.trim()}/Conversation/${identify}`).put(file);\n    await storage.ref(`image/${currentLesson.trim()}/Conversation`).child(identify).getDownloadURL().then(url => {\n      imgURL = url;\n    })\n    setConversationCreateModalContent({\n      ...conversationCreateModalContent,\n      image: imgURL\n    })\n    return imgURL\n  }\n\n  const uploadLessonImg = async (file) => {\n    let identify = file.name + '__' + Date.now();\n    let imgURL;\n    await storage.ref(`image/L3_6/${identify}`).put(file);\n    await storage.ref(`image/L3_6`).child(identify).getDownloadURL().then(url => {\n      imgURL = url;\n    })\n    setLessonCreateModalContent({\n      ...lessonCreateModalContent,\n      image: imgURL\n    })\n    return imgURL\n  }\n\n  const uploadVoiceLink = async (file) => {\n    let identify = file.name + '__' + Date.now();\n    let voiceURL;\n    await storage.ref(`voice/${currentLesson.trim()}/Vocabulary/${identify}`).put(file);\n    await storage.ref(`voice/${currentLesson.trim()}/Vocabulary`).child(identify).getDownloadURL().then(url => {\n      voiceURL = url;\n    })\n    setVocabularyCreateModalContent({\n      ...vocabularyCreateModalContent,\n      voice_link: voiceURL\n    })\n    return voiceURL\n  }\n\n  const uploadConversationVoiceLink = async (file) => {\n    let identify = file.name + '__' + Date.now();\n    let voiceURL;\n    await storage.ref(`voice/${currentLesson.trim()}/Conversation/${identify}`).put(file);\n    await storage.ref(`voice/${currentLesson.trim()}/Conversation`).child(identify).getDownloadURL().then(url => {\n      voiceURL = url;\n    })\n    setConversationCreateModalContent({\n      ...conversationCreateModalContent,\n      voice_link: voiceURL\n    })\n    return voiceURL\n  }\n\n  return (\n    <>\n      {\n        loading ?\n          <Row justify=\"center\" align=\"middle\" style={{ width: '100%', height: '80vh' }}>\n            <Space size=\"middle\">\n              <Spin size=\"large\" />\n            </Space>\n          </Row> :\n          <Row style={{ width: '100%', height: '80vh' }} justify=\"center\">\n            <Button onClick={showLessonCreateModal} type=\"text\" style={{ border: 'none', color: 'blue', marginBottom: '20px', marginLeft: '0' }} size={\"large\"}>\n              <PlusOutlined />Add new lesson\n            </Button>\n            <Table\n              dataSource={dataSource}\n              columns={columns}\n              pagination={{\n                position: ['topRight', 'bottomRight'],\n                pageSize: 10\n              }}\n            />\n            <Modal\n              visible={isLessonCreateModalVisible}\n              width={900}\n              title=\"Create new Lesson\"\n              onCancel={() => {\n                setLessonCreateModalContent({})\n                setLessonCreateModalVisible(false)\n              }}\n              footer={[\n                <Button\n                  key=\"submit\"\n                  form=\"lessonCreateForm\"\n                  default\n                  loading={isSomethingLoading}\n                  htmlType=\"submit\"\n                >\n                  Create\n              </Button>\n              ]}\n            >\n              <div\n                style={{ maxHeight: '60vh', overflowY: 'auto' }}\n              >\n                <Form\n                  id=\"lessonCreateForm\"\n                  name=\"lessonCreateForm\"\n                  onFinish={onLessonCreateFormFinish}\n                  onFinishFailed={(e) => console.log(e)}\n                >\n                  <h3>Lesson Name</h3>\n                  <Form.Item\n                    name=\"lessonName\"\n                    rules={[{ required: true, message: 'This field is required!' }]}\n                  >\n                    <Input placeholder=\"Lesson Name\" />\n                  </Form.Item>\n                  <h3>Level</h3>\n                  <Form.Item\n                    name=\"levelID\"\n                    initialValue={currentLevel}\n                    rules={[{ required: true, message: 'This field is required!' }]}\n                  >\n                    <Input disabled />\n                  </Form.Item>\n                  <h3>Lesson Image</h3>\n                  <Upload\n                    listType=\"picture-card\"\n                    showUploadList={false}\n                    action={uploadLessonImg}\n                    beforeUpload={beforeUpload}\n                    onChange={handleLessonImageChange}\n                  >\n                    {\n                      lessonCreateModalContent.image ? <img src={lessonCreateModalContent.image} style={{ width: '100%' }} alt={lessonCreateModalContent.image} /> :\n                        <div>\n                          <PlusOutlined />\n                          <div style={{ marginTop: 8 }}>Upload</div>\n                        </div>\n                    }\n                  </Upload>\n                </Form>\n              </div>\n            </Modal>\n\n            <Modal\n              visible={isModalVisible}\n              width={1200}\n              onCancel={() => {\n                setModalVisible(false)\n                setVocabularyDataSource([])\n                setQuizDataSource([])\n                setConverastionDataSource([])\n              }}\n              footer={[\n              ]}\n            >\n              <div\n                style={{ maxHeight: '60vh', overflowY: 'auto' }}\n              >\n                <Tabs defaultActiveKey=\"tabVocabulary\">\n                  <TabPane tab=\"Vocabulary\" key=\"tabVocabulary\">\n                    {\n                      vocabularyDataSource.length > 0 ?\n                        <>\n                          <Button onClick={showVocabularyCreateModal} type=\"text\" style={{ border: 'none', color: 'blue', marginBottom: '20px', marginLeft: '0' }} size={\"large\"}>\n                            <PlusOutlined />Add new vocabulary\n                         </Button>\n                          <Row justify=\"center\">\n                            <Table\n                              dataSource={vocabularyDataSource}\n                              columns={vocabularyColumn}\n                              pagination={{\n                                position: ['bottomRight'],\n                                pageSize: 10\n                              }}\n                              style={{ width: '98%' }}\n                            />\n                            <Modal\n                              visible={isVocabularyCreateModalVisible}\n                              width={900}\n                              title=\"Create new vocabulary\"\n                              onCancel={() => {\n                                setVocabularyCreateModalContent({})\n                                setVocabularyCreateModalVisible(false)\n                              }}\n                              footer={[\n                                <Button\n                                  key=\"submit\"\n                                  form=\"vocaCreateForm\"\n                                  default\n                                  loading={isSomethingLoading}\n                                  htmlType=\"submit\"\n                                >\n                                  Create\n                              </Button>\n                              ]}\n                            >\n                              <div\n                                style={{ maxHeight: '60vh', overflowY: 'auto' }}\n                              >\n                                <Form\n                                  id=\"vocaCreateForm\"\n                                  name=\"vocaCreateForm\"\n                                  onFinish={onVocabularyCreateFormFinish}\n                                  onFinishFailed={(e) => console.log(e)}\n                                >\n                                  <h3>Vocabulary</h3>\n                                  <Form.Item\n                                    name=\"vocabulary\"\n                                    rules={[{ required: true, message: 'This field is required!' }]}\n                                  >\n                                    <Input placeholder=\"vocabulary\" />\n                                  </Form.Item>\n                                  <h3>Vocabulary Description</h3>\n                                  <Form.Item\n                                    name=\"description\"\n                                    rules={[{ required: true, message: 'This field is required!' }]}\n                                  >\n                                    <Input placeholder=\"description\" />\n                                  </Form.Item>\n                                  <h3>Vocabulary Voice</h3>\n                                  <Upload\n                                    listType=\"picture-card\"\n                                    showUploadList={false}\n                                    action={uploadVoiceLink}\n                                    onChange={handleVocaImageChange}\n                                  >\n                                    {\n                                      vocabularyCreateModalContent.voice_link ? <audio key={vocabularyCreateModalContent.voice_link} controls><source src={vocabularyModalContent.voice_link} type=\"audio/mpeg\" /></audio> :\n                                        <div>\n                                          <PlusOutlined />\n                                          <div style={{ marginTop: 8 }}>Upload</div>\n                                        </div>\n                                    }\n                                  </Upload>\n                                  <h3>Vocabulary Image</h3>\n                                  <Upload\n                                    listType=\"picture-card\"\n                                    showUploadList={false}\n                                    action={uploadImg}\n                                    beforeUpload={beforeUpload}\n                                    onChange={handleVocaImageChange}\n                                  >\n                                    {\n                                      vocabularyCreateModalContent.image ? <img src={vocabularyCreateModalContent.image} style={{ width: '100%' }} alt={vocabularyCreateModalContent.image} /> :\n                                        <div>\n                                          <PlusOutlined />\n                                          <div style={{ marginTop: 8 }}>Upload</div>\n                                        </div>\n                                    }\n                                  </Upload>\n                                </Form>\n                              </div>\n                            </Modal>\n                            <Modal\n                              visible={isVocabularyUpdateModalVisible}\n                              width={900}\n                              onCancel={() => {\n                                setVocabularyUpdateModalVisible(false)\n                              }}\n                              footer={[\n                                <Button\n                                  key=\"submit\"\n                                  form=\"vocaForm\"\n                                  default\n                                  loading={isSomethingLoading}\n                                  htmlType=\"submit\"\n                                >\n                                  Submit\n                              </Button>\n                              ]}\n                            >\n                              <div\n                                style={{ maxHeight: '60vh', overflowY: 'auto' }}\n                              >\n                                <Form\n                                  id=\"vocaForm\"\n                                  name=\"vocaForm\"\n                                  form={vocaForm}\n                                  onFinish={onVocabularyFormFinish}\n                                  onFinishFailed={(e) => console.log(e)}\n                                >\n                                  <h3>Vocabulary ID</h3>\n                                  <Form.Item\n                                    name=\"id\"\n                                    rules={[{ required: true, message: 'This field is required!' }]}\n                                    initialValue={vocabularyModalContent.id}\n                                  >\n                                    <Input disabled />\n                                  </Form.Item>\n                                  <h3>Vocabulary</h3>\n                                  <Form.Item\n                                    name=\"vocabulary\"\n                                    rules={[{ required: true, message: 'This field is required!' }]}\n                                    initialValue={vocabularyModalContent.vocabulary}\n                                  >\n                                    <Input />\n                                  </Form.Item>\n                                  <h3>Description</h3>\n                                  <Form.Item\n                                    name=\"description\"\n                                    rules={[{ required: true, message: 'This field is required!' }]}\n                                    initialValue={vocabularyModalContent.description}\n                                  >\n                                    <Input />\n                                  </Form.Item>\n                                  <h3>Vocabulary Image</h3>\n                                  {/* <Form.Item\n                                    name=\"image\"\n                                    rules={[{ required: true, message: 'This field is required!' }]}\n                                    initialValue={vocabularyModalContent.image}\n                                  >\n                                    <Image src={vocabularyModalContent.image} width={300} height={300} />\n                                  </Form.Item> */}\n                                  <Upload\n                                    listType=\"picture-card\"\n                                    showUploadList={false}\n                                    action={uploadImg}\n                                    beforeUpload={beforeUpload}\n                                    onChange={handleVocaImageChange}\n                                  >\n                                    {\n                                      vocabularyCreateModalContent.image ? <img src={vocabularyCreateModalContent.image} style={{ width: '100%' }} alt={vocabularyCreateModalContent.image} /> :\n                                        <div>\n\n                                          <div style={{ marginTop: 20 }}>\n                                            <img src={vocabularyModalContent.image} style={{ width: '100%' }} />\n                                          </div>\n                                        </div>\n                                    }\n                                  </Upload>\n                                  <h3 style={{ marginTop: 20 }}>Vocabulary Voice</h3>\n                                  {/* <Form.Item\n                                    name=\"voice_link\"\n                                    rules={[{ required: true, message: 'This field is required!' }]}\n                                    initialValue={vocabularyModalContent.voice_link}\n                                  >\n                                    <audio key={vocabularyModalContent.id} controls><source src={vocabularyModalContent.voice_link} type=\"audio/mpeg\" /></audio>\n                                  </Form.Item> */}\n                                  <Upload\n                                    listType=\"picture-card\"\n                                    showUploadList={false}\n                                    action={uploadVoiceLink}\n                                    onChange={handleVocaImageChange}\n                                  >\n                                    {\n                                      vocabularyCreateModalContent.voice_link ? <audio key={vocabularyCreateModalContent.voice_link} controls><source src={vocabularyCreateModalContent.voice_link} type=\"audio/mpeg\" /></audio> :\n                                        <div >\n                                          <div style={{ marginTop: 8, width: 60 }}>\n                                            <audio key={vocabularyModalContent.voice_link} controls><source src={vocabularyModalContent.voice_link} type=\"audio/mpeg\" /></audio>\n                                          </div>\n                                        </div>\n                                    }\n                                  </Upload>\n                                </Form>\n                              </div>\n                            </Modal>\n                          </Row>\n                        </> :\n                        <Row justify=\"center\" align=\"middle\" style={{ width: '100%', height: '100%' }}>\n                          <Space size=\"middle\">\n                            <Spin size=\"large\" />\n                          </Space>\n                        </Row>\n                    }\n                  </TabPane>\n                  <TabPane tab=\"Conversation\" key=\"tabConversation\">\n                    {\n                      conversationDataSource.length > 0 ?\n                        <>\n                          <Button onClick={showConversationCreateModal} type=\"text\" style={{ border: 'none', color: 'blue', marginBottom: '20px', marginLeft: '0' }} size={\"large\"}>\n                            <PlusOutlined />Add new conversation\n                          </Button>\n                          <Row justify=\"center\">\n\n                            <Table\n                              dataSource={conversationDataSource}\n                              columns={conversationColumn}\n                              pagination={{\n                                position: ['bottomRight'],\n                                pageSize: 10\n                              }}\n                            />\n                            <Modal\n                              visible={isConversationCreateModalVisible}\n                              width={900}\n                              title=\"Create new converastion\"\n                              onCancel={() => {\n                                setConversationCreateModalContent({})\n                                setConversationCreateModalVisible(false)\n                              }}\n                              footer={[\n                                <Button\n                                  key=\"submit\"\n                                  form=\"conversationCreateForm\"\n                                  default\n                                  loading={isSomethingLoading}\n                                  htmlType=\"submit\"\n                                >\n                                  Create\n                              </Button>\n                              ]}\n                            >\n                              <div\n                                style={{ maxHeight: '60vh', overflowY: 'auto' }}\n                              >\n                                <Form\n                                  id=\"conversationCreateForm\"\n                                  name=\"conversationCreateForm\"\n                                  onFinish={onConversationCreateFormFinish}\n                                  onFinishFailed={(e) => console.log(e)}\n                                >\n                                  <h3>Conversation</h3>\n                                  <Form.Item\n                                    name=\"conversation\"\n                                    rules={[{ required: true, message: 'This field is required!' }]}\n                                  >\n                                    <Input placeholder=\"Conversation\" />\n                                  </Form.Item>\n                                  <h3>Conversation Description</h3>\n                                  <Form.Item\n                                    name=\"description\"\n                                    rules={[{ required: true, message: 'This field is required!' }]}\n                                  >\n                                    <Input placeholder=\"Conversation Description\" />\n                                  </Form.Item>\n                                  <h3>Conversation Voice</h3>\n                                  <Upload\n                                    listType=\"picture-card\"\n                                    showUploadList={false}\n                                    action={uploadConversationVoiceLink}\n                                    onChange={handleVocaImageChange}\n                                  >\n                                    {\n                                      conversationCreateModalContent.voice_link ? <audio key={conversationCreateModalContent.voice_link} controls><source src={conversationModalContent.voice_link} type=\"audio/mpeg\" /></audio> :\n                                        <div>\n                                          <PlusOutlined />\n                                          <div style={{ marginTop: 8 }}>Upload</div>\n                                        </div>\n                                    }\n                                  </Upload>\n                                  <h3>Conversation Image</h3>\n                                  <Upload\n                                    listType=\"picture-card\"\n                                    showUploadList={false}\n                                    action={uploadConversationImg}\n                                    beforeUpload={beforeUpload}\n                                    onChange={handleVocaImageChange}\n                                  >\n                                    {\n                                      conversationCreateModalContent.image ? <img src={conversationCreateModalContent.image} style={{ width: '100%' }} alt={conversationCreateModalContent.image} /> :\n                                        <div>\n                                          <PlusOutlined />\n                                          <div style={{ marginTop: 8 }}>Upload</div>\n                                        </div>\n                                    }\n                                  </Upload>\n                                </Form>\n                              </div>\n                            </Modal>\n                            <Modal\n                              visible={isConversationUpdateModalVisible}\n                              width={900}\n                              onCancel={() => {\n                                setConversationUpdateModalVisible(false)\n                              }}\n                              footer={[\n                                <Button\n                                  key=\"submit\"\n                                  form=\"conversationForm\"\n                                  default\n                                  loading={isSomethingLoading}\n                                  htmlType=\"submit\"\n                                >\n                                  Submit\n                          </Button>\n                              ]}\n                            >\n                              <div\n                                style={{ maxHeight: '60vh', overflowY: 'auto' }}\n                              >\n                                <Form\n                                  id=\"conversationForm\"\n                                  name=\"conversationForm\"\n                                  form={conversationForm}\n                                  onFinish={onConverastionFormFinish}\n                                  onFinishFailed={(e) => console.log(e)}\n                                >\n                                  <h3>Conversation ID</h3>\n                                  <Form.Item\n                                    name=\"id\"\n                                    rules={[{ required: true, message: 'This field is required!' }]}\n                                    initialValue={conversationModalContent.id}\n                                  >\n                                    <Input disabled />\n                                  </Form.Item>\n                                  <h3>Conversation</h3>\n                                  <Form.Item\n                                    name=\"conversation\"\n                                    rules={[{ required: true, message: 'This field is required!' }]}\n                                    initialValue={conversationModalContent.conversation}\n                                  >\n                                    <Input />\n                                  </Form.Item>\n                                  <h3>Description</h3>\n                                  <Form.Item\n                                    name=\"description\"\n                                    rules={[{ required: true, message: 'This field is required!' }]}\n                                    initialValue={conversationModalContent.description}\n                                  >\n                                    <Input />\n                                  </Form.Item>\n                                  <h3>Conversation Voice</h3>\n                                  <Form.Item\n                                    name=\"voice_link\"\n                                    rules={[{ required: true, message: 'This field is required!' }]}\n                                    initialValue={conversationModalContent.voice_link}\n                                  >\n                                    <audio key={conversationModalContent.id} controls><source src={conversationModalContent.voice_link && `https://drive.google.com/uc?export=download&id=${conversationModalContent.voice_link.split('/').reverse()[1]}`} type=\"audio/mpeg\" /></audio>\n                                  </Form.Item>\n                                </Form>\n                              </div>\n                            </Modal>\n                          </Row>\n                        </>\n                        :\n                        <Row justify=\"center\" align=\"middle\" style={{ width: '100%', height: '100%' }}>\n                          <Space size=\"middle\">\n                            <Spin size=\"large\" />\n                          </Space>\n                        </Row>\n                    }\n                  </TabPane>\n                  <TabPane tab=\"Quiz\" key=\"tabQuiz\">\n                    {/* {\n                      quizDataSource.length > 0 ? */}\n                    <Row justify=\"center\">\n                      <Button onClick={showQuizDropDownCreateModal} type=\"text\" style={{ border: 'none', color: 'blue', marginBottom: '20px', marginLeft: '0' }} size={\"large\"}>\n                        <PlusOutlined />Add new question\n                      </Button>\n                      <Table\n                        dataSource={quizDataSource}\n                        columns={quizColumn}\n                        pagination={{\n                          position: ['bottomRight'],\n                          pageSize: 10\n                        }}\n                      />\n                      <Modal\n                        visible={isDropDownCreateModalVisible}\n                        width={900}\n                        title=\"Choose Question Type\"\n                        onCancel={() => {\n                          setDropDownCreateModalVisible(false)\n                        }}\n                        footer={[\n                          <Button\n                            key=\"submit\"\n                            form=\"conversationCreateForm\"\n                            default\n                            loading={isSomethingLoading}\n                            htmlType=\"submit\"\n                          >\n                          </Button>\n                        ]}\n                      >\n                        <Dropdown overlay={menu} trigger={['click']}>\n                          <Button>\n                            Choose Quiz Type <DownOutlined />\n                          </Button>\n                        </Dropdown>\n                      </Modal>\n                      <Modal\n                        visible={isQuizUpdateModalVisible}\n                        title=\"Update Quiz\"\n                        width={900}\n                        onCancel={() => {\n                          setQuizUpdateModalVisible(false)\n                        }}\n                        footer={[\n                          <Button\n                            key=\"submit\"\n                            form=\"quizForm\"\n                            default\n                            loading={isSomethingLoading}\n                            htmlType=\"submit\"\n                          >\n                            Submit\n                          </Button>\n                        ]}\n                      >\n                        <div\n                          style={{ maxHeight: '60vh', overflowY: 'auto' }}\n                        >\n                          <Form\n                            id=\"quizForm\"\n                            name=\"quizForm\"\n                            form={quizForm}\n                            onFinish={onQuizFormFinish}\n                            onFinishFailed={(e) => console.log(e)}\n                          >\n                            <h3>Question ID</h3>\n                            <Form.Item\n                              name=\"questionID\"\n                              rules={[{ required: true, message: 'This field is required!' }]}\n                              initialValue={quizModalContent.questionID}\n                            >\n                              <Input disabled />\n                            </Form.Item>\n                            <h3>Question </h3>\n                            <Form.Item\n                              name=\"question\"\n                              rules={[{ required: true, message: 'This field is required!' }]}\n                              initialValue={quizModalContent.question}\n                            >\n                              {\n                                (quizModalContent.quizType === 1) ?\n                                  <Input /> :\n                                  (quizModalContent.quizType === 2) ?\n                                    <audio key={quizModalContent.questionID} controls><source src={quizModalContent.question && `https://drive.google.com/uc?export=download&id=${quizModalContent.question.split('/').reverse()[1]}`} type=\"audio/mpeg\" /></audio> :\n                                    (quizModalContent.quizType === 3) ?\n                                      <Image src={quizModalContent && `https://drive.google.com/thumbnail?id=${quizModalContent.question.split('/').reverse()[1]}`} width={300} height={300} />\n                                      : <Input />\n                              }\n                            </Form.Item>\n                            <h3>Quiz ID</h3>\n                            <Form.Item\n                              name=\"quizID\"\n                              rules={[{ required: true, message: 'This field is required!' }]}\n                              initialValue={quizModalContent.quizID}\n                            >\n                              <Input disabled />\n                            </Form.Item>\n                            <h3>Quiz type</h3>\n                            <Form.Item\n                              name=\"quizType\"\n                              rules={[{ required: true, message: 'This field is required!' }]}\n                              initialValue={quizModalContent.quizType}\n                            >\n                              <Input disabled />\n                            </Form.Item>\n                            {\n                              quizModalContent.options && quizModalContent.options.map((option, index) => <div key={option.optionID}>\n                                <h3>Answer {index + 1}  </h3>\n                                <Form.Item\n                                  name={`option_${index + 1}`}\n                                  rules={[{ required: true, message: 'This field is required!' }]}\n                                  initialValue={option.optionName}\n                                >\n                                  <Input />\n                                </Form.Item>\n                              </div>)\n                            }\n                          </Form>\n                        </div>\n                      </Modal>\n                    </Row>\n                    {/* : */}\n                    {/* <Row justify=\"center\" align=\"middle\" style={{ width: '100%', height: '100%' }}>\n                          <Space size=\"middle\">\n                            <Spin size=\"large\" />\n                          </Space>\n                        </Row> */}\n                    {/* } */}\n                  </TabPane>\n                </Tabs>\n              </div>\n            </Modal>\n          </Row>\n      }\n    </>\n  )\n}\nexport default connect(state => ({\n}), dispatch => ({\n}))(LessonsView)\n","/Users/mac/antd-admin/src/config/axios.js",["152","153"],"/Users/mac/antd-admin/src/firebase/firebase.utils.js",[],"/Users/mac/antd-admin/src/components/sign-in/index.js",[],"/Users/mac/antd-admin/src/components/sign-in/sign-in.js",["154","155"],"import React, { useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\nimport { Form, Input, Button, Row, Col, Typography, Avatar, message } from 'antd';\nimport { UserOutlined } from '@ant-design/icons'\nimport { request, setToken } from '../../config/axios'\n\nimport Creators from '../../redux/user'\n\nconst SignIn = (props) => {\n  const onFinish = async values => {\n    try {\n      props.signInStart()\n      const { data: { tokenType, accessToken } } = await request.post('/api/admin/login-admin', values)\n      if (tokenType === 'Bearer') {\n        console.log(\"okay\")\n        props.signInSuccess(accessToken)\n      } else {\n        message.error(accessToken)\n      }\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  useEffect(() => {\n    console.log(props)\n    if (props.isLogin) {\n      props.history.push('/')\n    }\n  }, [props.isLogin])\n\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  return (\n    <Row type=\"flex\" justify=\"center\" style={{ minHeight: '100vh' }}>\n      <Col span={6} justify=\"center\" align=\"middle\" style={{ padding: '16px 24px', minHeight: '640px', borderRadius: '30px', marginTop: '64px' }}>\n        <Avatar size={48} icon={<UserOutlined />} justify=\"center\" style={{ color: '#fff', backgroundColor: 'rgb(220, 0, 78)' }} />\n        <Typography align=\"middle\" style={{ fontSize: '28px', marginBottom: '24px' }}>Sign in</Typography>\n        <Form\n          name=\"basic\"\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            name=\"username\"\n            rules={[{ required: true, message: 'Please input your username!' }]}\n          >\n            <Input size=\"large\" style={{ padding: '18.5px 14px' }} placeholder=\"Username\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            rules={[{ required: true, message: 'Please input your password!' }]}\n          >\n            <Input.Password size=\"large\" style={{ padding: '18.5px 14px' }} placeholder=\"Password\" />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" size=\"large\" style={{ borderRadius: '4px', boxShadow: \"5px 8px 24px 5px rgba(208, 216, 243, 0.6)\" }} block>\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </Col>\n    </Row>\n  );\n};\n\n\nexport default connect(state => ({\n  isLogin: state.user.isLogin,\n}), dispatch => ({\n  signInStart: () => dispatch(Creators.signInStart()),\n  signInSuccess: (token) => dispatch(Creators.signInSuccess(token))\n}))(withRouter(SignIn));\n",{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":1,"column":17,"nodeType":"162","messageId":"163","endLine":1,"endColumn":21},{"ruleId":"160","severity":1,"message":"164","line":2,"column":25,"nodeType":"162","messageId":"163","endLine":2,"endColumn":33},{"ruleId":"160","severity":1,"message":"165","line":4,"column":10,"nodeType":"162","messageId":"163","endLine":4,"endColumn":34},{"ruleId":"160","severity":1,"message":"166","line":11,"column":8,"nodeType":"162","messageId":"163","endLine":11,"endColumn":16},{"ruleId":"167","severity":1,"message":"168","line":20,"column":1,"nodeType":"169","endLine":20,"endColumn":37},{"ruleId":"160","severity":1,"message":"170","line":1,"column":17,"nodeType":"162","messageId":"163","endLine":1,"endColumn":26},{"ruleId":"160","severity":1,"message":"171","line":1,"column":38,"nodeType":"162","messageId":"163","endLine":1,"endColumn":47},{"ruleId":"160","severity":1,"message":"172","line":11,"column":3,"nodeType":"162","messageId":"163","endLine":11,"endColumn":17},{"ruleId":"160","severity":1,"message":"170","line":1,"column":17,"nodeType":"162","messageId":"163","endLine":1,"endColumn":26},{"ruleId":"160","severity":1,"message":"171","line":1,"column":28,"nodeType":"162","messageId":"163","endLine":1,"endColumn":37},{"ruleId":"160","severity":1,"message":"173","line":1,"column":39,"nodeType":"162","messageId":"163","endLine":1,"endColumn":47},{"ruleId":"160","severity":1,"message":"174","line":6,"column":10,"nodeType":"162","messageId":"163","endLine":6,"endColumn":14},{"ruleId":"160","severity":1,"message":"175","line":6,"column":16,"nodeType":"162","messageId":"163","endLine":6,"endColumn":23},{"ruleId":"160","severity":1,"message":"176","line":4,"column":46,"nodeType":"162","messageId":"163","endLine":4,"endColumn":53},{"ruleId":"160","severity":1,"message":"177","line":5,"column":44,"nodeType":"162","messageId":"163","endLine":5,"endColumn":49},{"ruleId":"160","severity":1,"message":"178","line":7,"column":10,"nodeType":"162","messageId":"163","endLine":7,"endColumn":25},{"ruleId":"160","severity":1,"message":"179","line":24,"column":10,"nodeType":"162","messageId":"163","endLine":24,"endColumn":34},{"ruleId":"160","severity":1,"message":"180","line":29,"column":10,"nodeType":"162","messageId":"163","endLine":29,"endColumn":20},{"ruleId":"160","severity":1,"message":"181","line":34,"column":10,"nodeType":"162","messageId":"163","endLine":34,"endColumn":32},{"ruleId":"160","severity":1,"message":"182","line":34,"column":34,"nodeType":"162","messageId":"163","endLine":34,"endColumn":59},{"ruleId":"160","severity":1,"message":"183","line":38,"column":10,"nodeType":"162","messageId":"163","endLine":38,"endColumn":18},{"ruleId":"160","severity":1,"message":"184","line":262,"column":9,"nodeType":"162","messageId":"163","endLine":262,"endColumn":28},{"ruleId":"185","severity":1,"message":"186","line":1060,"column":45,"nodeType":"187","endLine":1060,"endColumn":113},{"ruleId":"160","severity":1,"message":"166","line":3,"column":8,"nodeType":"162","messageId":"163","endLine":3,"endColumn":16},{"ruleId":"160","severity":1,"message":"188","line":4,"column":10,"nodeType":"162","messageId":"163","endLine":4,"endColumn":15},{"ruleId":"160","severity":1,"message":"189","line":6,"column":19,"nodeType":"162","messageId":"163","endLine":6,"endColumn":27},{"ruleId":"190","severity":1,"message":"191","line":31,"column":6,"nodeType":"192","endLine":31,"endColumn":21,"suggestions":"193"},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],"no-unused-vars","'lazy' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'createStructuredSelector' is defined but never used.","'Creators' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Component' is defined but never used.","'useEffect' is defined but never used.","'UploadOutlined' is defined but never used.","'useState' is defined but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'message' is defined but never used.","'Image' is defined but never used.","'LoadingOutlined' is defined but never used.","'isQuizCreateModalVisible' is assigned a value but never used.","'isDropDown' is assigned a value but never used.","'quizCreateModalContent' is assigned a value but never used.","'setQuizCreateModalContent' is assigned a value but never used.","'quizType' is assigned a value but never used.","'showQuizCreateModal' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'store' is defined but never used.","'setToken' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["196"],"no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},"Update the dependencies array to be: [props, props.isLogin]",{"range":"199","text":"200"},[882,897],"[props, props.isLogin]"]